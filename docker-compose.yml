services:
  djangoapp:
    container_name: djangoapp_lowprice
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - 8000:8000
    volumes:
      - ./djangoapp:/djangoapp
      - ./data/web/static:/data/web/static/
      - ./data/web/media:/data/web/media/
    env_file:
      - ./dotenv_files/.env
    depends_on:
      psql:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
    # Diz ao entrypoint para executar o bloco "web"
    command: ['web']

  psql:
    container_name: psql_lowprice
    image: postgres:17-alpine
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data/
    env_file:
      - ./dotenv_files/.env
    ports:
      - '5433:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    container_name: redis_lowprice
    image: 'redis:7-alpine'

  celery_worker:
    container_name: worker_lowprice
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - ./djangoapp:/djangoapp
    env_file:
      - ./dotenv_files/.env
    depends_on:
      - djangoapp
      - redis
    command: ['worker']
  reactapp:
      container_name: reactapp_lowprice
      build:
        context: ./reactapp 
      ports:
        - "3000:3000" 
      volumes:
        - ./reactapp:/app
        - /app/node_modules 
      depends_on:
        - djangoapp